}
})
}
shinyApp(ui,server)
server <- function(input,output,session) {
observeEvent(input$intro, {
if (input$tabs == "zigui") {
rintrojs::introjs(session, options = list(
steps = data.frame(element = c(NA, "one"),
intro = c("This first step is the same regardless of the tab, but the second step is different",
"This is the first tab"))
))
} else if (input$tabs == "wang") {
rintrojs::introjs(session, options = list(
steps = data.frame(element = c(NA, "#two"),
intro = c("This first step is the same regardless of the tab, but the second step is different",
"This is the second tab"))
))
}
})
}
shinyApp(ui,server)
runApp()
ui <- fluidPage(
rintrojs::introjsUI(),
tabsetPanel(id = "tabs",
tabPanel("zigui",h1("One", id = "first_panel")),
tabPanel("wang",h1("Two", id = "two"))),
actionButton("intro", "Start Intro")
)
server <- function(input,output,session) {
observeEvent(input$intro, {
if (input$tabs == "zigui") {
rintrojs::introjs(session, options = list(
steps = data.frame(element = c(NA, "#first_panel"),
intro = c("This first step is the same regardless of the tab, but the second step is different",
"This is the first tab"))
))
} else if (input$tabs == "wang") {
rintrojs::introjs(session, options = list(
steps = data.frame(element = c(NA, "#two"),
intro = c("This first step is the same regardless of the tab, but the second step is different",
"This is the second tab"))
))
}
})
}
shinyApp(ui,server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- fluidPage(
rintrojs::introjsUI(),
tabsetPanel(id = "tab_z",
tabPanel("zigui",h1("One", id = "first_panel") ),
tabPanel("wang",h1("Two", id = "two"))),
actionButton("intro", "Start Intro")
)
server <- function(input,output,session) {
observeEvent(input$intro, {
if (input$tabs == "zigui") {
rintrojs::introjs(session, options = list(
steps = data.frame(element = c(NA, "#first_panel"),
intro = c("This first step is the same regardless of the tab, but the second step is different",
"This is the first tab"))
))
} else if (input$tabs == "wang") {
rintrojs::introjs(session, options = list(
steps = data.frame(element = c(NA, "#two"),
intro = c("This first step is the same regardless of the tab, but the second step is different",
"This is the second tab"))
))
}
})
}
shinyApp(ui,server)
ui <- fluidPage(
rintrojs::introjsUI(),
tabsetPanel(id = "tab_z",
tabPanel("zigui",h1("One", id = "first_panel") ),
tabPanel("wang",h1("Two", id = "two"))),
actionButton("intro", "Start Intro")
)
server <- function(input,output,session) {
observeEvent(input$intro, {
if (input$tab_z == "zigui") {
rintrojs::introjs(session, options = list(
steps = data.frame(element = c(NA, "#first_panel"),
intro = c("This first step is the same regardless of the tab, but the second step is different",
"This is the first tab"))
))
} else if (input$tabs == "wang") {
rintrojs::introjs(session, options = list(
steps = data.frame(element = c(NA, "#two"),
intro = c("This first step is the same regardless of the tab, but the second step is different",
"This is the second tab"))
))
}
})
}
shinyApp(ui,server)
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- fluidPage(
rintrojs::introjsUI(),
tabsetPanel(id = "tabs",
tabPanel("zigui",h1("One", id = "first_panel") ),
tabPanel("wang",h1("Two", id = "two"))),
actionButton("intro", "Start Intro")
)
server <- function(input,output,session) {
observeEvent(input$intro, {
print(input$tabs)
if (input$tabs == "zigui") {
rintrojs::introjs(session, options = list(
steps = data.frame(element = c(NA, "#first_panel"),
intro = c("This first step is the same regardless of the tab, but the second step is different",
"This is the first tab"))
))
} else if (input$tabs == "wang") {
rintrojs::introjs(session, options = list(
steps = data.frame(element = c(NA, "#two"),
intro = c("This first step is the same regardless of the tab, but the second step is different",
"This is the second tab"))
))
}
})
}
shinyApp(ui,server)
runApp()
runApp()
runApp()
runApp()
a = "<h4 style=\"color: #800080;\">Posterior Distribution Visualization</h4>"
b = "Posterior Distribution Visualization"
b in a
b %in% a
str_contains(a,b)
install.packages("sjmisc")
library(sjmisc)
str_contains(a,b)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(ui)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
pushR = function(foo, bar){
foo[[length(foo)+1]] <- bar
foo
}
pick_unique<-function(chain){
first_row = as.numeric(chain[1,])
keep_col = duplicated(first_row)
return(chain[,!keep_col])
}
#dynamic user input
output$data_upload = renderUI({
chain_list = c()
for (i in 1:input$n_file){chain_list = pushR(chain_list,paste0("chain",i))}
Files <- lapply(1:input$n_file, function(i) {
inputName <- chain_list[i]
#sliderInput(inputName, inputName, min=0, max=100, value=0, post="%")
fileInput(inputName, inputName, accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")
)
})
do.call(tagList, Files)
})
pushR = function(foo, bar){
foo[[length(foo)+1]] <- bar
foo
}
pick_unique<-function(chain){
first_row = as.numeric(chain[1,])
keep_col = duplicated(first_row)
return(chain[,!keep_col])
}
#dynamic user input
output$data_upload = renderUI({
chain_list = c()
for (i in 1:input$n_file){chain_list = pushR(chain_list,paste0("chain",i))}
Files <- lapply(1:input$n_file, function(i) {
inputName <- chain_list[i]
#sliderInput(inputName, inputName, min=0, max=100, value=0, post="%")
fileInput(inputName, inputName, accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")
)
})
do.call(tagList, Files)
})
runApp('~/Downloads/JWAS Helper')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(gridExtra)
getwd()
pheno_data = read.csv("Example/SEM_phenotype_data.csv")
head(pheno_data)
pheno_data = read.csv("Example/SEM_phenotype_data.csv")
head(pheno_data)
paramter_name = colnames(pheno_data)
paramter_name
num_graph = dim(pheno_data)[2]
num_graph
ggplot(pheno_data, aes(x=y1, y=y2)) + geom_point()
ggplot(pheno_data, aes(x=pheno_data[,1], y=pheno_data[,2] )) + geom_point()
plot_vec = list()        # list of plot
ggplot(pheno_data, aes(x=pheno_data[,1], y=pheno_data[,2] )) + geom_point()+
xlab(trait_name[1]) + ylab(trait_name[2])
trait_name = colnames(pheno_data)
ggplot(pheno_data, aes(x=pheno_data[,1], y=pheno_data[,2] )) + geom_point()+
xlab(trait_name[1]) + ylab(trait_name[2])
plot_vec = list()        # list of plot
count = 1
for (i in 1:num_graph ){
for (j in 1:num_graph){
plot_vec[[count]] = ggplot(pheno_data, aes(x=pheno_data[,i], y=pheno_data[,j] )) +
geom_point()+
xlab(trait_name[i]) + ylab(trait_name[j])
count = count+1
}
}
grid.arrange(grobs = plot_vec)
plot_vec = list()        # list of plot
count = 1
count = 1
for (i in 1:num_graph ){
for (j in 1:num_graph){
print(count)
plot_vec[[count]] = ggplot(pheno_data, aes(x=pheno_data[,i], y=pheno_data[,j] )) +
geom_point()+
xlab(trait_name[i]) + ylab(trait_name[j])
count = count+1
}
}
plot_vec[1]
plot_vec[2]
plot_vec[3]
head(pheno_data)
ggplot(pheno_data, aes(x=pheno_data[,1], y=pheno_data[,3] )) +
geom_point()
plot_vec = list()        # list of plot
count = 1
for (i in 1:num_graph ){
for (j in 1:num_graph){
print(count)
plot_vec[[count]] = ggplot(pheno_data, aes(x=pheno_data[,i], y=pheno_data[,j] )) +
geom_point() #+ xlab(trait_name[i]) + ylab(trait_name[j])
count = count+1
}
}
grid.arrange(grobs = plot_vec)
count = 1
for (i in 1:num_graph ){
for (j in 1:num_graph){
print(i)
plot_vec[[count]] = ggplot(pheno_data, aes(x=pheno_data[,i], y=pheno_data[,j] )) +
geom_point() #+ xlab(trait_name[i]) + ylab(trait_name[j])
count = count+1
}
}
pheno_data[,1]
dim(plot_vec)
length(plot_vec)
plot_vec = list()        # list of plot
count = 1
for (i in 1:num_graph ){
for (j in 1:num_graph){
plot_vec[count] = ggplot(pheno_data, aes(x=pheno_data[,i], y=pheno_data[,j] )) +
geom_point() #+ xlab(trait_name[i]) + ylab(trait_name[j])
count = count+1
}
}
plot_vec = list()        # list of plot
count = 1
for (i in 1:num_graph ){
for (j in 1:num_graph){
plot_vec[[count]] = ggplot(pheno_data, aes(x=pheno_data[,i], y=pheno_data[,j] )) +
geom_point() + xlab(trait_name[i]) + ylab(trait_name[j])
count = count+1
}
}
grid.arrange(grobs = plot_vec)
plot_vec[[1]]
plot_vec[[5]]
plot_vec[[2]]
plot_vec[[3]]
pheno_data = read.csv("Example/SEM_phenotype_data.csv")
head(pheno_data)
trait_name = colnames(pheno_data)
trait_name
num_graph = dim(pheno_data)[2]
plot_vec = list()        # list of plot
count = 1
for (i in 1:num_graph ){
for (j in 1:num_graph){
plot_vec[[count]] = ggplot(pheno_data, aes(x=pheno_data[,i], y=pheno_data[,j] )) +
geom_point() + xlab(trait_name[i]) + ylab(trait_name[j])
count = count+1
}
}
grid.arrange(grobs = plot_vec)
pheno_data[,1]
pheno_data[,2]
pheno_data[,3]
plot_vec = list()        # list of plot
count = 1
for (i in 1:2 ){
for (j in 1:2){
plot_vec[[count]] = ggplot(pheno_data, aes(x=pheno_data[,i], y=pheno_data[,j] )) +
geom_point() + xlab(trait_name[i]) + ylab(trait_name[j])
count = count+1
}
}
grid.arrange(grobs = plot_vec)
ggplot(pheno_data, aes(x=pheno_data[,1], y=pheno_data[,1] ))
ggplot(pheno_data, aes(x=pheno_data[,1], y=pheno_data[,1] )) +
geom_point()
ggplot(pheno_data, aes(x=pheno_data[,2], y=pheno_data[,2] )) +
geom_point()
ggplot(pheno_data, aes(x=pheno_data[,3], y=pheno_data[,3] )) +
geom_point()
for (i in 1:3 ){
for (j in 1:3){
print(i)
print(j)
plot_vec[[count]] = ggplot(pheno_data, aes(x=pheno_data[,i], y=pheno_data[,j] )) +
geom_point() + xlab(trait_name[i]) + ylab(trait_name[j])
count = count+1
}
}
plot_vec[[2]]
for (i in 1:1 ){
for (j in 2:2){
plot_vec[[count]] = ggplot(pheno_data, aes(x=pheno_data[,i], y=pheno_data[,j] )) +
geom_point() + xlab(trait_name[i]) + ylab(trait_name[j])
count = count+1
}
}
plot_vec[[1]]
count = 1
plot_vec = list()        # list of plot
count = 1
for (i in 1:1 ){
for (j in 1:3){
plot_vec[[count]] = ggplot(pheno_data, aes(x=pheno_data[,i], y=pheno_data[,j] )) +
geom_point() + xlab(trait_name[i]) + ylab(trait_name[j])
count = count+1
}
}
grid.arrange(grobs = plot_vec)
plot_vec = list()        # list of plot
count = 1
for (i in 1:1 ){
for (j in 1:3){
plot_vec[[count]] = ggplot(pheno_data, aes(x=pheno_data[,i], y=pheno_data[,j] )) + geom_point() +
xlab(trait_name[i]) + ylab(trait_name[j])
count = count+1
}
}
grid.arrange(grobs = plot_vec)
